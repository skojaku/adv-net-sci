{
  "hash": "c681912df42bfb409f34eb9a3bf17833",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Coding - Centrality\"\njupyter: advnetsci\nexecute:\n    enabled: true\n---\n\n# Computing centrality with Python\n\n## Network of university students\n\nLet's compute the centrality of the network using Python igraph.\n\n::: {#7f3cb3bc .cell execution_count=1}\n``` {.python .cell-code}\n# Uncomment if you use Colab\n#!pip install igraph\n```\n:::\n\n\n::: {#471e4528 .cell execution_count=2}\n``` {.python .cell-code}\nimport igraph\n\nnames = [\n    \"Sarah\",\n    \"Mike\",\n    \"Emma\",\n    \"Alex\",\n    \"Olivia\",\n    \"James\",\n    \"Sophia\",\n    \"Ethan\",\n    \"Ava\",\n    \"Noah\",\n    \"Lily\",\n    \"Lucas\",\n    \"Henry\",\n]\nedge_list = [\n    (0, 1),\n    (0, 2),\n    (1, 2),\n    (2, 3),\n    (3, 4),\n    (3, 5),\n    (3, 6),\n    (4, 5),\n    (6, 7),\n    (6, 8),\n    (6, 9),\n    (7, 8),\n    (7, 9),\n    (8, 9),\n    (9, 10),\n    (9, 11),\n    (9, 12),\n]\ng = igraph.Graph()\ng.add_vertices(13)\ng.vs[\"name\"] = names\ng.add_edges(edge_list)\nigraph.plot(g, vertex_label=g.vs[\"name\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n![](02-coding_files/figure-html/cell-3-output-1.svg){}\n:::\n:::\n\n\n`igraph` offers a wide range of centrality measures as methods of the `igraph.Graph` class.\n\n- **Degree centrality**: `igraph.Graph.degree()`\n- **Closeness centrality**: `igraph.Graph.closeness()`\n- **Betweenness centrality**: `igraph.Graph.betweenness()`\n- **Harmonic centrality**: `igraph.Graph.harmonic_centrality()`\n- **Eccentricity**: `igraph.Graph.eccentricity()`\n- **Eigenvector centrality**: `igraph.Graph.eigenvector_centrality()`\n- **PageRank centrality**: `igraph.Graph.personalized_pagerank()`\n\nFor example, the closeness centrality is computed by\n\n::: {#f95c4d6d .cell execution_count=3}\n``` {.python .cell-code}\ng.closeness()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n[0.3,\n 0.3,\n 0.4,\n 0.5217391304347826,\n 0.36363636363636365,\n 0.36363636363636365,\n 0.5454545454545454,\n 0.42857142857142855,\n 0.42857142857142855,\n 0.48,\n 0.3333333333333333,\n 0.3333333333333333,\n 0.3333333333333333]\n```\n:::\n:::\n\n\n### Computing Katz centrality\n\nLet's compute the Katz centrality without using igraph.\nLet us first define the adjacency matrix of the graph\n\n::: {#eef40cfd .cell execution_count=4}\n``` {.python .cell-code}\nA = g.get_adjacency_sparse()\n```\n:::\n\n\nwhich is the scipy CSR sparse matrix. The Katz centrality is given by\n\n$$\n\\mathbf{c} = \\beta \\mathbf{1} + \\alpha \\mathbf{A} \\mathbf{c}\n$$\n\nSo, how do we solve this? We can use a linear solver but here we will use a simple method:\n\n1. Initialize $\\mathbf{c}$ with a random vector.\n2. Compute the right hand side of the equation and update $\\mathbf{c}$.\n3. Repeat the process until $\\mathbf{c}$ converges.\n\nLet's implement this.\n\n::: {#3d651cc1 .cell execution_count=5}\n``` {.python .cell-code}\nimport numpy as np\n\nalpha, beta = 0.1, 0.05 # Hyperparameters\nn_nodes = g.vcount() # number of nodes\nc = np.random.rand(n_nodes, 1) # column random vector\n\nfor _ in range(100):\n    c_next = beta * np.ones((n_nodes, 1)) + alpha * A * c\n    if np.linalg.norm(c_next - c) < 1e-6:\n        break\n    c = c_next\nprint(c)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[0.06338729]\n [0.06338729]\n [0.07048542]\n [0.07807918]\n [0.06423107]\n [0.06423107]\n [0.08184309]\n [0.07474495]\n [0.07474495]\n [0.09085937]\n [0.05908602]\n [0.05908602]\n [0.05908602]]\n```\n:::\n:::\n\n\n- Does the centrality converge?\n- Change the hyperparameter and see how the result changes üòâ\nIf the centrality diverges, think about why it diverges.\n\n*Hint*: Katz centrality can be analytically computed by\n\n$$\n\\mathbf{c} = \\beta \\left(\\mathbf{I} -  \\alpha \\mathbf{A} \\right)^{-1} \\mathbf{1}\n$$\n\n### Exercise (Optional)\n\nCompute the PageRank centrality of this graph\n\n::: {#79a4af7f .cell execution_count=6}\n``` {.python .cell-code}\n# Your code here\n```\n:::\n\n\n## Network of ancient Roman roads\n\n### Load the data & construct the network\n\n::: {#223200a5 .cell execution_count=7}\n``` {.python .cell-code}\nimport pandas as pd\n\nroot = \"https://raw.githubusercontent.com/skojaku/adv-net-sci/main/data/roman-roads\"\nnode_table = pd.read_csv(f\"{root}/node_table.csv\")\nedge_table = pd.read_csv(f\"{root}/edge_table.csv\")\n```\n:::\n\n\nThe node table:\n\n::: {#9d2817cf .cell execution_count=8}\n``` {.python .cell-code}\nnode_table.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>node_id</th>\n      <th>lon</th>\n      <th>lat</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>12.506</td>\n      <td>41.875</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>12.470</td>\n      <td>41.904</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>12.471</td>\n      <td>41.881</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nThe edge table:\n\n::: {#ea82cd21 .cell execution_count=9}\n``` {.python .cell-code}\nedge_table.head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>src</th>\n      <th>trg</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1785</td>\n      <td>358</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1785</td>\n      <td>1771</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1771</td>\n      <td>350</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nLet's construct a network from the node and edge tables.\n\n::: {#1c97e9b2 .cell execution_count=10}\n``` {.python .cell-code}\nimport igraph\n\ng = igraph.Graph() # create an empty graph\ng.add_vertices(node_table[\"node_id\"].values) # add nodes\ng.add_edges(list(zip(edge_table[\"src\"].values, edge_table[\"trg\"].values))) # add edges\n```\n:::\n\n\nwhich looks like this:\n\n::: {#3b8c53c0 .cell execution_count=11}\n``` {.python .cell-code}\ncoord = list(zip(node_table[\"lon\"].values, -node_table[\"lat\"].values))\nigraph.plot(g, layout = coord, vertex_size = 5)\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n![](02-coding_files/figure-html/cell-12-output-1.svg){}\n:::\n:::\n\n\n### Exercise üèõÔ∏è\n\n1. Compute the following centrality measures:\n    - Degree centrality üî¢\n    - Eigenvector centrality\n    - PageRank centrality\n    - Katz centrality\n    - Betweenness centrality\n    - Closeness centrality\n2. Plot the centrality measures on the map and see in which centrality Rome is the most important node. üó∫Ô∏èüèõÔ∏è (as beautiful as possible!!)\n\n",
    "supporting": [
      "02-coding_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}